#!/bin/sh
# ~/bin/hesort histeditfile
# reorder histedit commit plan by commit message,
# -- favoring oldest commit message
# -- collapsing commits for the same message
#
# Pipeline explanation:
#   [cat]   input is HG histedit series
#   [egrep] strip comments explaining how to use histedit
#   [perl]  prefix the commit message and commit number to the plan
#   [sort]  this sorts similar commits next to eachother
#           -- newer ones should generally be after older ones
#              (technically if you have 99 and 100 it will mess up --
#               this hasn't been a problem)
#   [perl]  1. remove the prefixes inserted by the previous perl
#              (technically this could mess up if the commit message has
#               an underscore (`_`), stuff, `cherrypick` -- this hasn't been a problem)
#           2. if the previous correction was the same as the current,
#              replace pick with roll
case $(basename $1) in
  *git-rebase-todo*)
    roll=fixup
    len=$(cat $1|wc -l|perl -pne 's/^\s+//'|wc -c|perl -pne 's/^\s+//')
    pre='my $line=sprintf("%0'"$len"'d", $.);'
    rev='$line'
    ;;
  *)
    roll=roll
    rev='$3'
    pre=''
    ;;
esac
cat $1 |\
  egrep -v '^#'|\
  perl -pne "$pre"'s/(\S+) (\S+) (\S+) (.*)/$4_'"$rev"'. $1 $2 $3 $4/' |\
  sort |\
  perl -pne 's/(.*)_(?:.*? )pick/pick/; $q=$1; s/pick/'"$roll"'/ if $q eq $p; $p = $q;' > $1.0;
mv $1.0 $1
